// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  name        String
  description String?
  memberships Membership[]
  estimates   Estimate[]
}

model Estimate {
  id         String   @id @default(cuid())
  title      String
  hours      Float
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
}

model Category {
  id        String     @id @default(cuid())
  name      String
  color     String
  estimates Estimate[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  name      String?
  email     String   @unique
  password  String

  emailVerified DateTime?
  image         String?
  sessions      Session[]
  memberships   Membership[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MembershipRole {
  owner
  admin
  editor
  developer
  viewer
}

model Membership {
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  accepted  Boolean        @default(false)
  role      MembershipRole

  @@id([userId, projectId])
}
